@page "/gatewayconfig"
@using System.Text.Json
@using CodePlus.Blazor.Data.Ocelots
@using Ocelot.Configuration.File

@inject IOcelotAdminService OcelotAdminService
@inject NotificationService _notice
@inject MessageService _message

<Button Type="primary" OnClick="OpenAdd">添加路由配置</Button>

<Spin Spinning=@_loading>
    <Table DataSource="@_ocelotConfiguration.Routes.ToArray()">
        <Column @bind-Field="@context.DownstreamPathTemplate" Title="下游地址模板"></Column>
        <Column @bind-Field="@context.UpstreamPathTemplate" Title="上游地址模板"></Column>
        <Column @bind-Field="@context.DownstreamHostAndPorts" Title="下游IP端口">
            @foreach (var hostInfo in context.DownstreamHostAndPorts)
            {
                var color = "green";
                <Tag Color="@color">@hostInfo.Host:@hostInfo.Port</Tag>
            }
        </Column>
        <Column @bind-Field="@context.UpstreamHttpMethod" Title="上游Http请求">
            @foreach (var method in context.UpstreamHttpMethod)
            {
                var color = "orange-inverse";
                if (method.ToLower() == "post")
                {
                    color = "green-inverse";
                }
                if (method.ToLower() == "get")
                {
                    color = "blue-inverse";
                }
                if (method.ToLower() == "delete")
                {
                    color = "red-inverse";
                }
                <Tag Color="@color">@method</Tag>
            }
        </Column>
        @*<ActionColumn Title="操作">
                <Space Size="middle">
                    <SpaceItem>
                        <a>Invite @context.ServiceName</a>
                    </SpaceItem>
                    <SpaceItem>
                        <a>Delete</a>
                    </SpaceItem>
                </Space>
            </ActionColumn>*@
    </Table>
</Spin>

<div>
    <Drawer Closable="true" Width="720" Visible="_visible" Title='("添加网关地址")' OnClose="_=>Close()">
        <Template style="height:90%">
            <Row Gutter="16">
                <AntDesign.Col Span="24">
                    <Text>下游地址模板</Text>
                    <Input Placeholder="请输入下游地址模板" TValue="string" @bind-Value="@model.DownstreamPathTemplate"></Input>
                </AntDesign.Col>
            </Row>
            <br />
            <Row Gutter="16">
                <AntDesign.Col Span="24">
                    <Text>上游地址模板</Text>
                    <Input Placeholder="请输入上游地址模板" TValue="string" @bind-Value="@model.UpstreamPathTemplate"></Input>
                </AntDesign.Col>
            </Row>
            <br />
            <Row Gutter="16">
                <AntDesign.Col Span="12">
                    <Text>下游IP</Text>
                    <Input Placeholder="请输入下游IP" TValue="string" @bind-Value="@fileHostAndPort.Host" />
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>下游端口</Text>
                    <Input Placeholder="请输入下游端口" TValue="int" @bind-Value="@fileHostAndPort.Port" />
                </AntDesign.Col>
            </Row>
            <br />
            <Row Gutter="16">
                <AntDesign.Col Span="12">
                    <Text>上游HTTP方法</Text>
                    <Select Mode="multiple"
                            Style="width: 100%"
                            Placeholder="请选择上游Http方法"
                            @bind-Value="@_value"
                            AllowClear>
                        @foreach (var item in _items)
                        {
                            <SelectOption Value="@item">@item</SelectOption>
                        }
                    </Select>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>下游HTTP协议</Text>
                    <Select Style="width: 100%"
                            Placeholder="下游HTTP协议" @bind-Value="@model.DownstreamScheme">
                        <SelectOption Value="https">https</SelectOption>
                        <SelectOption Value="http">http</SelectOption>
                    </Select>
                </AntDesign.Col>
            </Row>
            <br />
            <Row>
                <AntDesign.Col Span="18">

                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <Button Type="default" OnClick="Close">返回</Button>
                    <Button Type="primary" OnClick="Submit">提交</Button>
                </AntDesign.Col>
            </Row>

        </Template>
    </Drawer>
</div>

<Button OnClick="@OnSuccessClick">
    error
</Button>

<Button Type="primary" OnClick="@OnClick">
    Display normal message
</Button>

@code {
    private FileConfiguration _ocelotConfiguration = new FileConfiguration();

    private bool _loading = true;

    private bool _visible = false;

    private string _value;

    private string[] _items;

    private FileRoute model = new FileRoute();

    private FileHostAndPort fileHostAndPort = new FileHostAndPort();

    protected override async Task OnInitializedAsync()
    {
        _items = new[] { "Get", "Post", "Delete", "Put" };
        _ocelotConfiguration = await OcelotAdminService.GetConfig();
        _loading = false;
    }

    async Task Close()
    {
        this._visible = false;
    }

    void OpenAdd()
    {
        this._visible = true;
    }

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    async void Submit()
    {
        var httpMethod = _value.Split(',').ToList();
        model.UpstreamHttpMethod = httpMethod;
        model.DownstreamHostAndPorts.Add(fileHostAndPort);
        var result = await OcelotAdminService.SetConfig(model);
        if (!string.IsNullOrWhiteSpace(result.HttpResponseMessages))
        {
            await _notice.Open(new NotificationConfig()
            {
                Message = "网关配置警告",
                Description = result.HttpResponseMessages,
                NotificationType = NotificationType.Warning
            });
        }
        else
        {
            _ocelotConfiguration = result.Result;
        }
        await Close();
    }

    private async Task NoticeWithIcon(NotificationType type)
    {
        await _notice.Open(new NotificationConfig()
        {
            Message = "网关配置警告",
            Description = "This is the content of the notification. This is the content of the notification. This is the content of the notification.",
            NotificationType = type
        });
    }

    private async Task OnSuccessClick()
    {
        await NoticeWithIcon(NotificationType.Success);
    }

    private void OnClick()
    {
        Console.WriteLine("onclick");
        _message.Info("This is a normal message");
    }

}
